// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Alive defines model for Alive.
type Alive struct {
	ServerTime *int64  `json:"serverTime,omitempty"`
	Status     *string `json:"status,omitempty"`
}

// ErrorModel defines model for ErrorModel.
type ErrorModel struct {
	Message string `json:"message"`
}

// Login defines model for Login.
type Login struct {
	Number string `json:"number"`
	Pin    string `json:"pin"`
}

// Positions defines model for Positions.
type Positions struct {
	Message   *string       `json:"message,omitempty"`
	Positions []interface{} `json:"positions"`
}

// ProcessId defines model for ProcessId.
type ProcessId = string

// Timeline defines model for Timeline.
type Timeline struct {
	Message  *string       `json:"message,omitempty"`
	Timeline []interface{} `json:"timeline"`
}

// TimelineDetails defines model for TimelineDetails.
type TimelineDetails struct {
	Message         *string       `json:"message,omitempty"`
	TimelineDetails []interface{} `json:"timelineDetails"`
}

// Verified defines model for Verified.
type Verified struct {
	Message *string `json:"message,omitempty"`
}

// Verify defines model for Verify.
type Verify struct {
	Token string `json:"token"`
}

// InternalServerError defines model for InternalServerError.
type InternalServerError = ErrorModel

// TimelineParams defines parameters for Timeline.
type TimelineParams struct {
	Since *float64 `form:"since,omitempty" json:"since,omitempty"`
}

// TimelineDetailsParams defines parameters for TimelineDetails.
type TimelineDetailsParams struct {
	Since *float64 `form:"since,omitempty" json:"since,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = Login

// VerifyJSONRequestBody defines body for Verify for application/json ContentType.
type VerifyJSONRequestBody = Verify

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// Alive request
	Alive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Login request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Positions request
	Positions(ctx context.Context, processId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Timeline request
	Timeline(ctx context.Context, processId string, params *TimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// TimelineDetails request
	TimelineDetails(ctx context.Context, processId string, params *TimelineDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// Verify request with any body
	VerifyWithBody(ctx context.Context, processId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Verify(ctx context.Context, processId string, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) Alive(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAliveRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Positions(ctx context.Context, processId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPositionsRequest(c.Server, processId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Timeline(ctx context.Context, processId string, params *TimelineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTimelineRequest(c.Server, processId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) TimelineDetails(ctx context.Context, processId string, params *TimelineDetailsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewTimelineDetailsRequest(c.Server, processId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) VerifyWithBody(ctx context.Context, processId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyRequestWithBody(c.Server, processId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Verify(ctx context.Context, processId string, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewVerifyRequest(c.Server, processId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAliveRequest generates requests for Alive
func NewAliveRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/alive")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPositionsRequest generates requests for Positions
func NewPositionsRequest(server string, processId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processId", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/positions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTimelineRequest generates requests for Timeline
func NewTimelineRequest(server string, processId string, params *TimelineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processId", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/timeline", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewTimelineDetailsRequest generates requests for TimelineDetails
func NewTimelineDetailsRequest(server string, processId string, params *TimelineDetailsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processId", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/timelinedetails", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Since != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "since", runtime.ParamLocationQuery, *params.Since); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewVerifyRequest calls the generic Verify builder with application/json body
func NewVerifyRequest(server string, processId string, body VerifyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewVerifyRequestWithBody(server, processId, "application/json", bodyReader)
}

// NewVerifyRequestWithBody generates requests for Verify with any type of body
func NewVerifyRequestWithBody(server string, processId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "processId", runtime.ParamLocationPath, processId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// Alive request
	AliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliveResponse, error)

	// Login request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// Positions request
	PositionsWithResponse(ctx context.Context, processId string, reqEditors ...RequestEditorFn) (*PositionsResponse, error)

	// Timeline request
	TimelineWithResponse(ctx context.Context, processId string, params *TimelineParams, reqEditors ...RequestEditorFn) (*TimelineResponse, error)

	// TimelineDetails request
	TimelineDetailsWithResponse(ctx context.Context, processId string, params *TimelineDetailsParams, reqEditors ...RequestEditorFn) (*TimelineDetailsResponse, error)

	// Verify request with any body
	VerifyWithBodyWithResponse(ctx context.Context, processId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyResponse, error)

	VerifyWithResponse(ctx context.Context, processId string, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyResponse, error)
}

type AliveResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Alive
	JSON401      *Alive
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r AliveResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AliveResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ProcessId
	JSON401      *ProcessId
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PositionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Positions
	JSON401      *Positions
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r PositionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PositionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TimelineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Timeline
	JSON401      *Timeline
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r TimelineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TimelineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type TimelineDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TimelineDetails
	JSON401      *TimelineDetails
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r TimelineDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r TimelineDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type VerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Verified
	JSON401      *Verified
	JSON500      *ErrorModel
}

// Status returns HTTPResponse.Status
func (r VerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r VerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AliveWithResponse request returning *AliveResponse
func (c *ClientWithResponses) AliveWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*AliveResponse, error) {
	rsp, err := c.Alive(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAliveResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// PositionsWithResponse request returning *PositionsResponse
func (c *ClientWithResponses) PositionsWithResponse(ctx context.Context, processId string, reqEditors ...RequestEditorFn) (*PositionsResponse, error) {
	rsp, err := c.Positions(ctx, processId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePositionsResponse(rsp)
}

// TimelineWithResponse request returning *TimelineResponse
func (c *ClientWithResponses) TimelineWithResponse(ctx context.Context, processId string, params *TimelineParams, reqEditors ...RequestEditorFn) (*TimelineResponse, error) {
	rsp, err := c.Timeline(ctx, processId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTimelineResponse(rsp)
}

// TimelineDetailsWithResponse request returning *TimelineDetailsResponse
func (c *ClientWithResponses) TimelineDetailsWithResponse(ctx context.Context, processId string, params *TimelineDetailsParams, reqEditors ...RequestEditorFn) (*TimelineDetailsResponse, error) {
	rsp, err := c.TimelineDetails(ctx, processId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseTimelineDetailsResponse(rsp)
}

// VerifyWithBodyWithResponse request with arbitrary body returning *VerifyResponse
func (c *ClientWithResponses) VerifyWithBodyWithResponse(ctx context.Context, processId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*VerifyResponse, error) {
	rsp, err := c.VerifyWithBody(ctx, processId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyResponse(rsp)
}

func (c *ClientWithResponses) VerifyWithResponse(ctx context.Context, processId string, body VerifyJSONRequestBody, reqEditors ...RequestEditorFn) (*VerifyResponse, error) {
	rsp, err := c.Verify(ctx, processId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseVerifyResponse(rsp)
}

// ParseAliveResponse parses an HTTP response from a AliveWithResponse call
func ParseAliveResponse(rsp *http.Response) (*AliveResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AliveResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Alive
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Alive
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ProcessId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest ProcessId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePositionsResponse parses an HTTP response from a PositionsWithResponse call
func ParsePositionsResponse(rsp *http.Response) (*PositionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PositionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Positions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Positions
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTimelineResponse parses an HTTP response from a TimelineWithResponse call
func ParseTimelineResponse(rsp *http.Response) (*TimelineResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TimelineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Timeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Timeline
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseTimelineDetailsResponse parses an HTTP response from a TimelineDetailsWithResponse call
func ParseTimelineDetailsResponse(rsp *http.Response) (*TimelineDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &TimelineDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TimelineDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest TimelineDetails
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseVerifyResponse parses an HTTP response from a VerifyWithResponse call
func ParseVerifyResponse(rsp *http.Response) (*VerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &VerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Verified
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Verified
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Status
	// (GET /alive)
	Alive(ctx echo.Context) error
	// Login
	// (POST /login)
	Login(ctx echo.Context) error
	// positions
	// (GET /{processId}/positions)
	Positions(ctx echo.Context, processId string) error
	// timeline
	// (GET /{processId}/timeline)
	Timeline(ctx echo.Context, processId string, params TimelineParams) error
	// timelinedetails
	// (GET /{processId}/timelinedetails)
	TimelineDetails(ctx echo.Context, processId string, params TimelineDetailsParams) error
	// Verify
	// (POST /{processId}/verify)
	Verify(ctx echo.Context, processId string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// Alive converts echo context to params.
func (w *ServerInterfaceWrapper) Alive(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Alive(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// Positions converts echo context to params.
func (w *ServerInterfaceWrapper) Positions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processId" -------------
	var processId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "processId", runtime.ParamLocationPath, ctx.Param("processId"), &processId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Positions(ctx, processId)
	return err
}

// Timeline converts echo context to params.
func (w *ServerInterfaceWrapper) Timeline(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processId" -------------
	var processId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "processId", runtime.ParamLocationPath, ctx.Param("processId"), &processId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TimelineParams
	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Timeline(ctx, processId, params)
	return err
}

// TimelineDetails converts echo context to params.
func (w *ServerInterfaceWrapper) TimelineDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processId" -------------
	var processId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "processId", runtime.ParamLocationPath, ctx.Param("processId"), &processId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processId: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params TimelineDetailsParams
	// ------------- Optional query parameter "since" -------------

	err = runtime.BindQueryParameter("form", true, false, "since", ctx.QueryParams(), &params.Since)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.TimelineDetails(ctx, processId, params)
	return err
}

// Verify converts echo context to params.
func (w *ServerInterfaceWrapper) Verify(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "processId" -------------
	var processId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "processId", runtime.ParamLocationPath, ctx.Param("processId"), &processId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter processId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Verify(ctx, processId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/alive", wrapper.Alive)
	router.POST(baseURL+"/login", wrapper.Login)
	router.GET(baseURL+"/:processId/positions", wrapper.Positions)
	router.GET(baseURL+"/:processId/timeline", wrapper.Timeline)
	router.GET(baseURL+"/:processId/timelinedetails", wrapper.TimelineDetails)
	router.POST(baseURL+"/:processId/verify", wrapper.Verify)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9KwLboxopTdqDbinSQ4AUCJCglyAHWhzZTCmSGVIGDMP/vSApU7LNBHYh",
	"dfewN4nz8R45T8PRltSq1UqCtIZUW4JgtJIG/MuDtICSimfANeCfiArdcq2kBWndI9Va8JparmTxbpR0",
	"a6ZeQUvd088IDanIT8WAUQSrKXy2vxQDQXa7XU4YmBq5dplIFZGzAJ0FbOfXx7v0d4KvwT1oVBrQ8sDa",
	"+JAX3npbo7ClllSES/v7LcmJ3WgIr7AEJC6lpbbzob3NWORy6eH6FbV4h9o65xHvE+QWjKFLSGdC+Og4",
	"AiPVa3R8SwA8qiWXp7ll1y4AE6lzooP/15B9fPBO4T4pw93pm0v2lRM9DuutFJFuThgMnkl4VDUY88CS",
	"KK6agku4jJsdRX1JLTqmmO2x78FSLsx/ozAKPovJ3j9F6G9A3nBgFwownWdzmsWqf+AMRQW3U4LOj8tG",
	"uQyHX/XLipvsTvOMm6wzwDKrspZKuoTMriCzSBloriEbtRX3xXIrHEC0/0I1JzlZA5qQ+PqqvCrdlpQG",
	"6YwVufFLOdHUrvyuCrpvF0uwp9yefRPIVOOphB5CfEL0PJww+46TH3bJX8tysq4YABINse+DdE25oAsB",
	"brO35fX/BtwoXHDGQDrg38KOU/niyRSpy8M38K5tKW7ikfvFQsSup0yiOr4pOrm44hyq47BCoXsGoYKx",
	"fyi2meyMQu7EGQV2NQIDaTkVhoy/FIsd7GbUzNA5P6Vmutq5NJ2YWjdngDeUC2AT6mZfh5wUW73H3xUH",
	"N1HyG39UlJlsozrMBudjBT2NLJoibcECGlK9bolTqG8oJCeSuvmCRPyTkuejEzxupG9zyiHyT1QkGueU",
	"xHkEJpeFHuEeSWM8CHyhDNdcHLgAC1mMORbIy2CYSx95n+ujA9wMyQyXtYMdAuN0y1TnboV4Gffj3rxS",
	"iyeRKPTeNqPQzoKfXGZ2QP1EZWyY9S4VW7aP/Ux099H+Q3sHB/JtJXgOi9mUyCL4kSDXw4CfnKrCD4BX",
	"YmcS427/gzDzPTj9oNbz/u4mtfjjlmDW12I+qZ4BPrlCx4UIv1RBQB0KUpGVtboqCqFqKlbK2OqmLMti",
	"fV2Q3dvu3wAAAP//tIiq5JkSAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
