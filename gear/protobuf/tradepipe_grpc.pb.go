// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: api/protobuf/tradepipe.proto

package protobuf

import (
	context "context"
	login "github.com/Sannrox/tradepipe/gear/protobuf/login"
	portfolio "github.com/Sannrox/tradepipe/gear/protobuf/portfolio"
	savingsplan "github.com/Sannrox/tradepipe/gear/protobuf/savingsplan"
	timeline "github.com/Sannrox/tradepipe/gear/protobuf/timeline"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TradePipeClient is the client API for TradePipe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TradePipeClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Login(ctx context.Context, in *login.Credentials, opts ...grpc.CallOption) (*login.ProcessId, error)
	Verify(ctx context.Context, in *login.TwoFAAsks, opts ...grpc.CallOption) (*login.TwoFAReturn, error)
	ReadTimeline(ctx context.Context, in *timeline.RequestTimeline, opts ...grpc.CallOption) (*timeline.ResponseTimeline, error)
	UpdateTimeline(ctx context.Context, in *timeline.RequestTimelineUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadTimelineDetails(ctx context.Context, in *timeline.RequestTimelineDetails, opts ...grpc.CallOption) (*timeline.ResponseTimelineDetails, error)
	ReadPortfolio(ctx context.Context, in *portfolio.RequestPortfolio, opts ...grpc.CallOption) (*portfolio.ResponsePortfolio, error)
	UpdatePortfolio(ctx context.Context, in *portfolio.RequestPortfolioUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ReadSavingsPlans(ctx context.Context, in *savingsplan.RequestSavingsplan, opts ...grpc.CallOption) (*savingsplan.ResponseSavingsplan, error)
	UpdateSavingsPlans(ctx context.Context, in *savingsplan.RequestSavingsplanUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type tradePipeClient struct {
	cc grpc.ClientConnInterface
}

func NewTradePipeClient(cc grpc.ClientConnInterface) TradePipeClient {
	return &tradePipeClient{cc}
}

func (c *tradePipeClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) Login(ctx context.Context, in *login.Credentials, opts ...grpc.CallOption) (*login.ProcessId, error) {
	out := new(login.ProcessId)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) Verify(ctx context.Context, in *login.TwoFAAsks, opts ...grpc.CallOption) (*login.TwoFAReturn, error) {
	out := new(login.TwoFAReturn)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/Verify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) ReadTimeline(ctx context.Context, in *timeline.RequestTimeline, opts ...grpc.CallOption) (*timeline.ResponseTimeline, error) {
	out := new(timeline.ResponseTimeline)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/ReadTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) UpdateTimeline(ctx context.Context, in *timeline.RequestTimelineUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/UpdateTimeline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) ReadTimelineDetails(ctx context.Context, in *timeline.RequestTimelineDetails, opts ...grpc.CallOption) (*timeline.ResponseTimelineDetails, error) {
	out := new(timeline.ResponseTimelineDetails)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/ReadTimelineDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) ReadPortfolio(ctx context.Context, in *portfolio.RequestPortfolio, opts ...grpc.CallOption) (*portfolio.ResponsePortfolio, error) {
	out := new(portfolio.ResponsePortfolio)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/ReadPortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) UpdatePortfolio(ctx context.Context, in *portfolio.RequestPortfolioUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/UpdatePortfolio", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) ReadSavingsPlans(ctx context.Context, in *savingsplan.RequestSavingsplan, opts ...grpc.CallOption) (*savingsplan.ResponseSavingsplan, error) {
	out := new(savingsplan.ResponseSavingsplan)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/ReadSavingsPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradePipeClient) UpdateSavingsPlans(ctx context.Context, in *savingsplan.RequestSavingsplanUpdate, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.TradePipe/UpdateSavingsPlans", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TradePipeServer is the server API for TradePipe service.
// All implementations must embed UnimplementedTradePipeServer
// for forward compatibility
type TradePipeServer interface {
	Status(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	Login(context.Context, *login.Credentials) (*login.ProcessId, error)
	Verify(context.Context, *login.TwoFAAsks) (*login.TwoFAReturn, error)
	ReadTimeline(context.Context, *timeline.RequestTimeline) (*timeline.ResponseTimeline, error)
	UpdateTimeline(context.Context, *timeline.RequestTimelineUpdate) (*emptypb.Empty, error)
	ReadTimelineDetails(context.Context, *timeline.RequestTimelineDetails) (*timeline.ResponseTimelineDetails, error)
	ReadPortfolio(context.Context, *portfolio.RequestPortfolio) (*portfolio.ResponsePortfolio, error)
	UpdatePortfolio(context.Context, *portfolio.RequestPortfolioUpdate) (*emptypb.Empty, error)
	ReadSavingsPlans(context.Context, *savingsplan.RequestSavingsplan) (*savingsplan.ResponseSavingsplan, error)
	UpdateSavingsPlans(context.Context, *savingsplan.RequestSavingsplanUpdate) (*emptypb.Empty, error)
	mustEmbedUnimplementedTradePipeServer()
}

// UnimplementedTradePipeServer must be embedded to have forward compatible implementations.
type UnimplementedTradePipeServer struct {
}

func (UnimplementedTradePipeServer) Status(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTradePipeServer) Login(context.Context, *login.Credentials) (*login.ProcessId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedTradePipeServer) Verify(context.Context, *login.TwoFAAsks) (*login.TwoFAReturn, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verify not implemented")
}
func (UnimplementedTradePipeServer) ReadTimeline(context.Context, *timeline.RequestTimeline) (*timeline.ResponseTimeline, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTimeline not implemented")
}
func (UnimplementedTradePipeServer) UpdateTimeline(context.Context, *timeline.RequestTimelineUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTimeline not implemented")
}
func (UnimplementedTradePipeServer) ReadTimelineDetails(context.Context, *timeline.RequestTimelineDetails) (*timeline.ResponseTimelineDetails, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTimelineDetails not implemented")
}
func (UnimplementedTradePipeServer) ReadPortfolio(context.Context, *portfolio.RequestPortfolio) (*portfolio.ResponsePortfolio, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPortfolio not implemented")
}
func (UnimplementedTradePipeServer) UpdatePortfolio(context.Context, *portfolio.RequestPortfolioUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePortfolio not implemented")
}
func (UnimplementedTradePipeServer) ReadSavingsPlans(context.Context, *savingsplan.RequestSavingsplan) (*savingsplan.ResponseSavingsplan, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSavingsPlans not implemented")
}
func (UnimplementedTradePipeServer) UpdateSavingsPlans(context.Context, *savingsplan.RequestSavingsplanUpdate) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSavingsPlans not implemented")
}
func (UnimplementedTradePipeServer) mustEmbedUnimplementedTradePipeServer() {}

// UnsafeTradePipeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TradePipeServer will
// result in compilation errors.
type UnsafeTradePipeServer interface {
	mustEmbedUnimplementedTradePipeServer()
}

func RegisterTradePipeServer(s grpc.ServiceRegistrar, srv TradePipeServer) {
	s.RegisterService(&TradePipe_ServiceDesc, srv)
}

func _TradePipe_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login.Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).Login(ctx, req.(*login.Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_Verify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(login.TwoFAAsks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).Verify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/Verify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).Verify(ctx, req.(*login.TwoFAAsks))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_ReadTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timeline.RequestTimeline)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).ReadTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/ReadTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).ReadTimeline(ctx, req.(*timeline.RequestTimeline))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_UpdateTimeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timeline.RequestTimelineUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).UpdateTimeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/UpdateTimeline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).UpdateTimeline(ctx, req.(*timeline.RequestTimelineUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_ReadTimelineDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timeline.RequestTimelineDetails)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).ReadTimelineDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/ReadTimelineDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).ReadTimelineDetails(ctx, req.(*timeline.RequestTimelineDetails))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_ReadPortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(portfolio.RequestPortfolio)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).ReadPortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/ReadPortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).ReadPortfolio(ctx, req.(*portfolio.RequestPortfolio))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_UpdatePortfolio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(portfolio.RequestPortfolioUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).UpdatePortfolio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/UpdatePortfolio",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).UpdatePortfolio(ctx, req.(*portfolio.RequestPortfolioUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_ReadSavingsPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(savingsplan.RequestSavingsplan)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).ReadSavingsPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/ReadSavingsPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).ReadSavingsPlans(ctx, req.(*savingsplan.RequestSavingsplan))
	}
	return interceptor(ctx, in, info, handler)
}

func _TradePipe_UpdateSavingsPlans_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(savingsplan.RequestSavingsplanUpdate)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TradePipeServer).UpdateSavingsPlans(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.TradePipe/UpdateSavingsPlans",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TradePipeServer).UpdateSavingsPlans(ctx, req.(*savingsplan.RequestSavingsplanUpdate))
	}
	return interceptor(ctx, in, info, handler)
}

// TradePipe_ServiceDesc is the grpc.ServiceDesc for TradePipe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TradePipe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.TradePipe",
	HandlerType: (*TradePipeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _TradePipe_Status_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _TradePipe_Login_Handler,
		},
		{
			MethodName: "Verify",
			Handler:    _TradePipe_Verify_Handler,
		},
		{
			MethodName: "ReadTimeline",
			Handler:    _TradePipe_ReadTimeline_Handler,
		},
		{
			MethodName: "UpdateTimeline",
			Handler:    _TradePipe_UpdateTimeline_Handler,
		},
		{
			MethodName: "ReadTimelineDetails",
			Handler:    _TradePipe_ReadTimelineDetails_Handler,
		},
		{
			MethodName: "ReadPortfolio",
			Handler:    _TradePipe_ReadPortfolio_Handler,
		},
		{
			MethodName: "UpdatePortfolio",
			Handler:    _TradePipe_UpdatePortfolio_Handler,
		},
		{
			MethodName: "ReadSavingsPlans",
			Handler:    _TradePipe_ReadSavingsPlans_Handler,
		},
		{
			MethodName: "UpdateSavingsPlans",
			Handler:    _TradePipe_UpdateSavingsPlans_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/protobuf/tradepipe.proto",
}
